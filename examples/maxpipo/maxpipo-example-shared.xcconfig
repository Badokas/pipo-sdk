// base xcode config file for pipo sdk example
// You need to adapt the first definition MAXAPI_DIR to where you put the Max SDK
// You might want to adapt the next 3 settings, but the rest should not need changing.    
    

// where is your Max SDK?
MAXAPI_DIR = ../../../max6.1sdk

// force built mxo to be placed in example project dir
CONFIGURATION_BUILD_DIR = $(PROJECT_DIR)


COMPONENTS_HEADER_DIRS = /System/Library/Frameworks/Accelerate.framework/Headers
VECLIB_FRAMEWORK_DIR = /System/Library/Frameworks/Accelerate.framework/Frameworks

    
///////////////////////////////////////////////////////////////////////////////
// Standard settings start here
///////////////////////////////////////////////////////////////////////////////

// Set to building universal binary
ARCHS = $(ARCHS_STANDARD_32_64_BIT)

// Dead Code Stripping
// 
// Activating this setting causes the -dead_strip flag to be passed to ld(1) via cc(1) to
// turn on dead code stripping.  If this option is selected, -gfull (not -gused) must be
// used to generate debugging symbols in order to have them correctly stripped.
// [-dead_strip]

DEAD_CODE_STRIPPING = YES


// Framework Search Paths
// 
// This is a list of paths to folders containing frameworks to be searched by the
// compiler for both included or imported header files when compiling C, Objective-C,
// C++, or Objective-C++, and by the linker for frameworks used by the product. Paths are
// delimited by whitespace, so any paths with spaces in them need to be properly quoted.
// [-F]

FRAMEWORK_SEARCH_PATHS = $(MAXAPI_DIR)/** $(VECLIB_FRAMEWORK_DIR)


GCC_AUTO_VECTORIZATION = YES


GCC_ENABLE_SSE3_EXTENSIONS = YES


GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS = YES


// Inline Methods Hidden
// 
// When enabled, out-of-line copies of inline methods are declared 'private extern'.
// [-fvisibility-inlines-hidden]

GCC_INLINES_ARE_PRIVATE_EXTERN = NO


// Precompile Prefix Header
// 
// Generates a precompiled header for the prefix header, which should reduce overall
// build times.
// 
// Note: Precompiling the prefix header will be most effective if the contents of the
// prefix header or any file it includes change rarely. If the contents of the prefix
// header or any file it includes change frequently, there may be a negative impact to
// overall build time.

GCC_PRECOMPILE_PREFIX_HEADER = YES


// Prefix Header
// 
// Implicitly include the named header. The path given should either be a project
// relative path or an absolute path.

GCC_PREFIX_HEADER = $(MAXAPI_DIR)/max-includes/macho-prefix.pch


// Preprocessor Macros
// 
// Space-separated list of preprocessor macros of the form "foo" or "foo=bar". [-D]

GCC_PREPROCESSOR_DEFINITIONS = $(BUILD_DEFS) $(CONFIG_DEFS)


// Treat Missing Function Prototypes as Errors
// 
// Causes warnings about missing function prototypes to be treated as errors.  Only
// applies to C and Objective-C.  [-Werror-implicit-function-declaration]

GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = NO


// Missing Newline At End Of File
// 
// Warn when a source file does not end with a newline.  [-Wnewline-eof]

GCC_WARN_ABOUT_MISSING_NEWLINE = YES


// Missing Function Prototypes
// 
// Causes warnings to be emitted about missing prototypes.  [-Wmissing-prototypes]

GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES


// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not void)
// contains a return statement without a return-value.  Also emits a warning when a
// function is defined without specifying a return type.  [-Wreturn-type]

GCC_WARN_ABOUT_RETURN_TYPE = YES


// Check Switch Statements
// 
// Warn whenever a switch statement has an index of enumeral type and lacks a case for
// one or more of the named codes of that enumeration.  The presence of a default label
// prevents this warning.  Case labels outside the enumeration range also provoke
// warnings when this option is used.  [-Wswitch]

GCC_WARN_CHECK_SWITCH_STATEMENTS = YES


// Missing Braces and Parentheses
// 
// Warn if parentheses are omitted in certain contexts, such as when there is an
// assignment in a context where a truth value is expected, or when operators are nested
// whose precedence people often get confused about.
// 
// Also warn about constructions where there may be confusion to which if statement an
// else branch belongs.  Here is an example of such a case:
// {
// if (a)
// if (b)
// foo ();
// else
// bar ();
// }
// 
// In C, every else branch belongs to the innermost possible if statement, which in this
// example is if (b) .  This is often not what the programmer expected, as illustrated in
// the above example by indentation the programmer chose.  When there is the potential
// for this confusion, GCC will issue a warning when this flag is specified.  To
// eliminate the warning, add explicit braces around the innermost if statement so there
// is no way the else could belong to the enclosing if .  The resulting code would look
// like this:
// {
// if (a)
// {
// if (b)
// foo ();
// else
// bar ();
// }
// }
// 
// [-Wparentheses]

GCC_WARN_MISSING_PARENTHESES = YES


// Hidden Local Variables
// 
// Warn whenever a local variable shadows another local variable, parameter or global
// variable or whenever a built-in function is shadowed.  [-Wshadow]

GCC_WARN_SHADOW = NO


// Sign Comparison
// 
// Warn when a comparison between signed and unsigned values could produce an incorrect
// result when the signed value is converted to unsigned.  [-Wsign-compare]

GCC_WARN_SIGN_COMPARE = YES


// Typecheck Calls to printf/scanf
// 
// Check calls to printf and scanf, etc., to make sure that the arguments supplied have
// types appropriate to the format string specified, and that the conversions specified
// in the format string make sense.  [-Wno-format]

GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES


// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is
// used without prior initialization.
// 
// Note that the compiler may not detect all cases where an automatic variable is
// initialized or all usage patterns that may lead to use prior to initialization.  You
// can toggle between the normal uninitialized value checking or the more aggressive
// (conservative) checking which finds more issues but the checking is much stricter.
// [-Wuninitialized,-Wconditional-uninitialized]

GCC_WARN_UNINITIALIZED_AUTOS = NO


// Unused Functions
// 
// Warn whenever a static function is declared but not defined or a non-inline static
// function is unused.  [-Wunused-function]

GCC_WARN_UNUSED_FUNCTION = YES


// Unused Labels
// 
// Warn whenever a label is declared but not used.  [-Wunused-label]

GCC_WARN_UNUSED_LABEL = YES


// Unused Parameters
// 
// Warn whenever a function parameter is unused aside from its declaration.
// [-Wunused-parameter]

GCC_WARN_UNUSED_PARAMETER = NO


// Unused Values
// 
// Warn whenever a statement computes a result that is explicitly not used.
// [-Wunused-value]

GCC_WARN_UNUSED_VALUE = YES


// Unused Variables
// 
// Warn whenever a local variable or non-constant static variable is unused aside from
// its declaration.  [-Wunused-variable]

GCC_WARN_UNUSED_VARIABLE = YES


// Force Package Info Generation
// 
// Forces the PkgInfo file to be written to wrapped products even if this file is not
// expected.

GENERATE_PKGINFO_FILE = YES


// Header Search Paths
// 
// This is a list of paths to folders to be searched by the compiler for included or
// imported header files when compiling C, Objective-C, C++, or Objective-C++. Paths are
// delimited by whitespace, so any paths with spaces in them need to be properly quoted.
// [-I]

HEADER_SEARCH_PATHS = $(MAXAPI_DIR)/** $(COMPONENTS_HEADER_DIRS) $(COMMON_HEADER_DIRS) $(VECLIB_FRAMEWORK_DIR)/vecLib.framework/Headers


// Info.plist File
// 
// This is the project-relative path to the plist file that contains the Info.plist
// information used by bundles.

INFOPLIST_FILE = external.plist


// Library Search Paths
// 
// This is a list of paths to folders to be searched by the linker for libraries used by
// the product. Paths are delimited by whitespace, so any paths with spaces in them need
// to be properly quoted. [-L]

LIBRARY_SEARCH_PATHS = 


// OS X Deployment Target
// 
// Code will load on this and later versions of OS X.  Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for null
// function pointers or specific system versions before calling newer APIs.
// 
// Compiler Default - Code will load on any Mac OS system that supports the APIs that are
// used.
// OS X 10.4 - Code will not load on systems earlier than 10.4. [10.4]
// OS X 10.5 - Code will not load on systems earlier than 10.5. [10.5]
// OS X 10.6 - Code will not load on systems earlier than 10.6. [10.6]
// OS X 10.7 - Code will not load on systems earlier than 10.7. [10.7]
// OS X 10.8 - Code will not load on systems earlier than 10.8. [10.8]
// OS X 10.9 - Code will not load on systems earlier than 10.9. [10.9]

MACOSX_DEPLOYMENT_TARGET = 10.6


MAX_LINKER_FLAGS = -framework MaxAPI -framework MaxAudioAPI -Wl,-U,_object_new_imp,-U,_object_method_imp


// Other Linker Flags
// 
// Options defined in this setting are passed to invocations of the linker.

OTHER_LDFLAGS = $(SYS_LINKER_FLAGS) $(MAX_LINKER_FLAGS)


// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the ADDITIONAL_SDKS
// setting.

SDKROOT = macosx


// Use Separate Strip
// 
// Activating this setting when the linked product is to be stripped will cause stripping
// to occur via a separate invocation of strip(1).  Otherwise stripping will occur during
// linking, if possible.

SEPARATE_STRIP = YES


SYS_LINKER_FLAGS = -lstdc++ -lmx -framework Accelerate -framework Carbon



// Wrapper Extension
// 
// This is the extension used for product wrappers, which has a default value based on
// the product type.

WRAPPER_EXTENSION = mxo
